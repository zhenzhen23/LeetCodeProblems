class Solution {
    public int[] twoSum(int[] numbers, int target) {
        
        HashMap<Integer, Integer> hMap = new HashMap<Integer, Integer>();
        int n = numbers.length;
        
        for(int i = 0; i < n; i++){
            hMap.put(numbers[i], i);
        }
        
        for(int i = 0; i < n; i++){
            int find = target - numbers[i];
            if(hMap.containsKey(find)){
                return new int[]{++i, hMap.get(find) + 1};
            }
        }
        return new int[2];
    }
}

//time O(n)
//space O(1)

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        
        int l = 0, r = numbers.length - 1;
        while(l < r){
            int sum = numbers[l] + numbers[r];
            if( sum == target){
                return new int[]{l + 1, r + 1};
            }else if(sum < target){
                l++;
            }else{
                r--;
            }
        }
        return new int[2];
    }
}
